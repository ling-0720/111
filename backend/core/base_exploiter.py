from abc import ABC, abstractmethod
from typing import Dict, Optional
from datetime import datetime
from ..models.vulnerability import Vulnerability
from ..utils.logger import setup_logger

logger = setup_logger(__name__)

class BaseExploiter(ABC):
    """漏洞利用模块基类"""
    
    def __init__(self, config: Dict = None):
        """
        初始化漏洞利用模块
        
        Args:
            config: 配置信息
        """
        self.config = config or {}
        self.logger = logger
        self._initialize_exploiter()
    
    @abstractmethod
    def _initialize_exploiter(self):
        """初始化漏洞利用环境"""
        pass
    
    @abstractmethod
    def exploit(self, vulnerability: Vulnerability, target_info: Dict) -> Dict:
        """
        执行漏洞利用
        
        Args:
            vulnerability: 目标漏洞
            target_info: 目标信息
            
        Returns:
            Dict: 利用结果
        """
        pass
    
    @abstractmethod
    def get_exploit_status(self, exploit_id: str) -> Dict:
        """
        获取利用任务状态
        
        Args:
            exploit_id: 利用任务ID
            
        Returns:
            Dict: 任务状态信息
        """
        pass
    
    @abstractmethod
    def stop_exploit(self, exploit_id: str) -> bool:
        """
        停止漏洞利用任务
        
        Args:
            exploit_id: 利用任务ID
            
        Returns:
            bool: 是否成功停止
        """
        pass

class ExploitException(Exception):
    """漏洞利用异常基类"""
    pass

class ExploitFailedException(ExploitException):
    """漏洞利用失败异常"""
    pass

class ExploitTimeoutException(ExploitException):
    """漏洞利用超时异常"""
    pass 